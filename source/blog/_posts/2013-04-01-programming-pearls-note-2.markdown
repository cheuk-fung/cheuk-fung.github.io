---
layout: blog
title: "Programming Pearls Note #2"
location: NKU, China
post: true
mathjax: true

excerpt: "演算法之美，簡單之美"
---

第二章提出的三個問題很有趣，特別是問題 B，解法真是巧妙。每個問題都有可做筆記之處，一一記之。

### 問題 A ###
二分法的威力在於它的時間複雜度為 $O(\log n)$，隨著規模的增大，時間增長極其緩慢。40 億個數中搜索缺少的一個，最壞也只用扫描 32 遍就找到了；而且利用臨時文件，每次就只需扫描前次的一半。

其難點在於尋找二分的對象，有時不是那麼顯然，往往需要靈機一動的時刻。

### 問題 B ###
簡言之，這個問題是：如何交換字串的兩部份，即使 `ab` 變為 `ba`？書中的解法讓我驚嘆不已：先各自翻轉 `ab`，形成 $a^{-1}b^{-1}$，再一起翻轉。巧妙之處在於其原理非常地簡洁，$(a^{-1}b^{-1})^{-1} = (b^{-1})^{-1}(a^{-1})^{-1} = ba$。Ken Thompson 認為這應當是一種常識……

如果讓我回到一年級，我一定說：好好學習「線性代數」。

### 問題 C ###
尋找字典中所有的變位詞，兩兩比較的時間複雜度為 $O(n^{2})$，然而字典中條目衆多，這樣要算很久。我想了兩個辦法：

- **同一類變位詞中的單詞長度相等。**那麼我們可以對字典按單詞長度排序，比較時只有比較同長度的。但是，這樣還是可以很輕易構造出使其退化為 $O(n^{2})$ 的字典。
- **同一個變位詞中一個單詞所含的字母种類和數量相同。**我們可以依此構造雜湊函式，但需要解决碰撞問題，寫起來蠻麻煩的。

咦？為甚麼要雜湊呢？排序呀！啊哈！靈機一動。實際上，第二條性質隠含了第一條，也更為本質地反應了變位詞的特性。我們只需這樣做：

1. 將每個單詞中的字母按照字母序重新排序，同一類變位詞將拥有一個相同的序列。
2. 將新的序列按字典序排序，同一類變位詞將聚集到一起。

運用兩次排序即可，演算法如此簡單。
